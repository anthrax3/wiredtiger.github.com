.TH "tune_bulk_load" 3 "Fri Oct 7 2016" "Version Version 2.8.1" "WiredTiger" \" -*- nroff -*-
.ad l
.nh
.SH NAME
tune_bulk_load \- Bulk-load 
When loading a large amount of data into a new object, using a cursor with the \fCbulk\fP configuration string enabled and loading the data in sorted order will be much faster than doing out-of-order inserts\&.
.PP
WiredTiger cursors can be configured for bulk-load using the \fCbulk\fP configuration keyword to \fBWT_SESSION::open_cursor\fP\&. Bulk-load is a 'fast
path' for quickly loading a large number of rows\&. Bulk-load may only be used on newly created objects, and an object being bulk-loaded is not accessible from other cursors\&.
.PP
Cursors configured for bulk-load only support the \fBWT_CURSOR::insert\fP and \fBWT_CURSOR::close\fP methods\&. Bulk load inserts are non-transactional: they cannot be rolled back and ignore the transactional state of the \fBWT_SESSION\fP in which they are opened\&.
.PP
When doing a bulk-load insert, keys must be inserted in sorted order\&. When doing a bulk-load insert into a column-store object, any skipped records will be created as already-deleted rows\&. If a column-store bulk-load cursor is configured with \fCappend\fP, the cursor key will be ignored and each inserted row will be assigned the next sequential record number\&.
.PP
When using the \fCsort\fP utility on a Linux or other POSIX-like system to pre-sort keys, the locale specified by the environment affects the sort order and may not match the default sort order used by WiredTiger\&. Set \fCLC_ALL=C\fP in the process' environment to configure the traditional sort order that uses native byte values\&.
.PP
When bulk-loading fixed-length column store objects, the \fCbulk\fP configuration string value \fCbitmap\fP allows chunks of a memory resident bitmap to be loaded directly into an object by passing a \fBWT_ITEM\fP to \fBWT_CURSOR::set_value\fP, where the size field indicates the number of records in the bitmap (as specified by the object's \fCvalue_format\fP configuration)\&. Bulk-loaded bitmap values must end on a byte boundary relative to the bit count (except for the last set of values loaded)\&. 
