.TH "WT_ENCRYPTOR" 3 "Fri Oct 7 2016" "Version Version 2.8.1" "WiredTiger" \" -*- nroff -*-
.ad l
.nh
.SH NAME
WT_ENCRYPTOR \- The interface implemented by applications to provide custom encryption\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "int(* \fBencrypt\fP )(\fBWT_ENCRYPTOR\fP *encryptor, \fBWT_SESSION\fP *session, uint8_t *src, size_t src_len, uint8_t *dst, size_t dst_len, size_t *result_lenp)"
.br
.RI "\fICallback to encrypt a chunk of data\&. \fP"
.ti -1c
.RI "int(* \fBdecrypt\fP )(\fBWT_ENCRYPTOR\fP *encryptor, \fBWT_SESSION\fP *session, uint8_t *src, size_t src_len, uint8_t *dst, size_t dst_len, size_t *result_lenp)"
.br
.RI "\fICallback to decrypt a chunk of data\&. \fP"
.ti -1c
.RI "int(* \fBsizing\fP )(\fBWT_ENCRYPTOR\fP *encryptor, \fBWT_SESSION\fP *session, size_t *expansion_constantp)"
.br
.RI "\fICallback to size a destination buffer for encryption\&. \fP"
.ti -1c
.RI "int(* \fBcustomize\fP )(\fBWT_ENCRYPTOR\fP *encryptor, \fBWT_SESSION\fP *session, \fBWT_CONFIG_ARG\fP *encrypt_config, \fBWT_ENCRYPTOR\fP **customp)"
.br
.RI "\fIIf non-NULL, this callback is called to customize the encryptor\&. \fP"
.ti -1c
.RI "int(* \fBterminate\fP )(\fBWT_ENCRYPTOR\fP *encryptor, \fBWT_SESSION\fP *session)"
.br
.RI "\fIIf non-NULL, a callback performed when the database is closed\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
The interface implemented by applications to provide custom encryption\&. 

Encryptors must implement the \fBWT_ENCRYPTOR\fP interface: the \fBWT_ENCRYPTOR::encrypt\fP, \fBWT_ENCRYPTOR::decrypt\fP and \fBWT_ENCRYPTOR::sizing\fP callbacks must be specified, \fBWT_ENCRYPTOR::customize\fP and \fBWT_ENCRYPTOR::terminate\fP are optional\&. To build your own encryptor, use one of the encryptors in \fCext/encryptors\fP as a template: \fCext/encryptors/nop_encrypt\fP is a simple encryptor that passes through data unchanged, and is a reasonable starting point; \fCext/encryptors/rotn_encrypt\fP is an encryptor implementing a simple rotation cipher, it shows the use of \fCkeyid\fP, \fCsecretkey\fP, and implements the \fBWT_ENCRYPTOR::customize\fP and \fBWT_ENCRYPTOR::terminate\fP callbacks\&.
.PP
Applications register their implementation with WiredTiger by calling \fBWT_CONNECTION::add_encryptor\fP\&.
.PP
.PP
.nf
/* Local encryptor structure\&. */
typedef struct {
        WT_ENCRYPTOR encryptor;         /* Must come first */

        WT_EXTENSION_API *wt_api;               /* Extension API */

        unsigned long nop_calls;                /* Count of calls */

} NOP_ENCRYPTOR;
.fi
.PP
.PP
.nf
/*
 * wiredtiger_extension_init --
 *      A simple shared library encryption example\&.
 */
int
wiredtiger_extension_init(WT_CONNECTION *connection, WT_CONFIG_ARG *config)
{
        NOP_ENCRYPTOR *nop_encryptor;

        (void)config;                           /* Unused parameters */

        if ((nop_encryptor = calloc(1, sizeof(NOP_ENCRYPTOR))) == NULL)
                return (errno);

        /*
         * Allocate a local encryptor structure, with a WT_ENCRYPTOR structure
         * as the first field, allowing us to treat references to either type of
         * structure as a reference to the other type\&.
         *
         * Heap memory (not static), because it can support multiple databases\&.
         */
        nop_encryptor->encryptor\&.encrypt = nop_encrypt;
        nop_encryptor->encryptor\&.decrypt = nop_decrypt;
        nop_encryptor->encryptor\&.sizing = nop_sizing;
        nop_encryptor->encryptor\&.terminate = nop_terminate;

        nop_encryptor->wt_api = connection->get_extension_api(connection);

                                                /* Load the encryptor */
        return (connection->add_encryptor(
            connection, "nop", (WT_ENCRYPTOR *)nop_encryptor, NULL));
}
.fi
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_encrypt\&.c\fP, \fBnop_encrypt\&.c\fP, and \fBrotn_encrypt\&.c\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "int(* WT_ENCRYPTOR::customize) (\fBWT_ENCRYPTOR\fP *encryptor, \fBWT_SESSION\fP *session, \fBWT_CONFIG_ARG\fP *encrypt_config, \fBWT_ENCRYPTOR\fP **customp)"

.PP
If non-NULL, this callback is called to customize the encryptor\&. The customize function is called whenever a keyid is used for the first time with this encryptor, whether it be in the \fBwiredtiger_open\fP call or the \fBWT_SESSION::create\fP call\&. This gives the algorithm an opportunity to retrieve and save keys in a customized encryptor\&. If the callback returns a non-NULL encryptor, that instance is used instead of this one for any callbacks\&.
.PP
\fBParameters:\fP
.RS 4
\fIencrypt_config\fP the 'encryption' portion of the configuration from the wiredtiger_open or \fBWT_SESSION::create\fP call 
.br
\fIcustomp\fP the new modified encryptor, or NULL\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
zero for success, non-zero to indicate an error\&. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_encrypt\&.c\fP\&.
.SS "int(* WT_ENCRYPTOR::decrypt) (\fBWT_ENCRYPTOR\fP *encryptor, \fBWT_SESSION\fP *session, uint8_t *src, size_t src_len, uint8_t *dst, size_t dst_len, size_t *result_lenp)"

.PP
Callback to decrypt a chunk of data\&. \fBWT_ENCRYPTOR::decrypt\fP takes a source buffer and a destination buffer\&. The contents are switched from \fCencrypt:\fP the source buffer is the encrypted value, and the destination buffer is sized to be the original size\&. If the callback successfully decrypts the source buffer to the destination buffer, it returns 0\&. If an error occurs, it returns an errno or WiredTiger error code\&.
.PP
On entry, \fCsrc\fP will point to memory, with the length of the memory in \fCsrc_len\fP\&. After successful completion, the callback should return \fC0\fP and set \fCresult_lenp\fP to the number of bytes required for the decrypted representation\&.
.PP
If the \fCdst\fP buffer is not big enough to hold the decrypted data, the callback should return an error\&.
.PP
This callback cannot be NULL\&.
.PP
\fBParameters:\fP
.RS 4
\fIsrc\fP the data to decrypt 
.br
\fIsrc_len\fP the length of the data to decrypt 
.br
\fIdst\fP the destination buffer 
.br
\fIdst_len\fP the length of the destination buffer 
.br
\fIresult_lenp\fP the length of the decrypted data 
.RE
.PP
\fBReturns:\fP
.RS 4
zero for success, non-zero to indicate an error\&.
.RE
.PP
.PP
.nf
/*
 * nop_decrypt --
 *      A simple decryption example that passes data through unchanged\&.
 */
static int
nop_decrypt(WT_ENCRYPTOR *encryptor, WT_SESSION *session,
    uint8_t *src, size_t src_len,
    uint8_t *dst, size_t dst_len,
    size_t *result_lenp)
{
        NOP_ENCRYPTOR *nop_encryptor = (NOP_ENCRYPTOR *)encryptor;

        (void)session;                          /* Unused parameters */
        (void)src_len;

        ++nop_encryptor->nop_calls;             /* Call count */

        /*
         * The destination length is the number of unencrypted bytes we're
         * expected to return\&.
         */
        memcpy(dst, src, dst_len);
        *result_lenp = dst_len;
        return (0);
}
.fi
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_encrypt\&.c\fP\&.
.SS "int(* WT_ENCRYPTOR::encrypt) (\fBWT_ENCRYPTOR\fP *encryptor, \fBWT_SESSION\fP *session, uint8_t *src, size_t src_len, uint8_t *dst, size_t dst_len, size_t *result_lenp)"

.PP
Callback to encrypt a chunk of data\&. \fBWT_ENCRYPTOR::encrypt\fP takes a source buffer and a destination buffer\&. The callback encrypts the source buffer (plain text) into the destination buffer\&.
.PP
On entry, \fCsrc\fP will point to memory, with the length of the memory in \fCsrc_len\fP\&. After successful completion, the callback should return \fC0\fP and set \fCresult_lenp\fP to the number of bytes required for the encrypted representation\&.
.PP
On entry, \fCdst\fP points to the destination buffer with a length of \fCdst_len\fP\&. The destination buffer will be at least src_len plus the size returned by that WT_ENCRYPT::sizing\&.
.PP
This callback cannot be NULL\&.
.PP
\fBParameters:\fP
.RS 4
\fIsrc\fP the data to encrypt 
.br
\fIsrc_len\fP the length of the data to encrypt 
.br
\fIdst\fP the destination buffer 
.br
\fIdst_len\fP the length of the destination buffer 
.br
\fIresult_lenp\fP the length of the encrypted data 
.RE
.PP
\fBReturns:\fP
.RS 4
zero for success, non-zero to indicate an error\&.
.RE
.PP
.PP
.nf
/*
 * nop_encrypt --
 *      A simple encryption example that passes data through unchanged\&.
 */
static int
nop_encrypt(WT_ENCRYPTOR *encryptor, WT_SESSION *session,
    uint8_t *src, size_t src_len,
    uint8_t *dst, size_t dst_len,
    size_t *result_lenp)
{
        NOP_ENCRYPTOR *nop_encryptor = (NOP_ENCRYPTOR *)encryptor;

        (void)session;                          /* Unused parameters */

        ++nop_encryptor->nop_calls;             /* Call count */

        if (dst_len < src_len)
                return (ENOMEM);

        memcpy(dst, src, src_len);
        *result_lenp = src_len;

        return (0);
}
.fi
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_encrypt\&.c\fP\&.
.SS "int(* WT_ENCRYPTOR::sizing) (\fBWT_ENCRYPTOR\fP *encryptor, \fBWT_SESSION\fP *session, size_t *expansion_constantp)"

.PP
Callback to size a destination buffer for encryption\&. \fBWT_ENCRYPTOR::sizing\fP is an callback that returns the number of additional bytes that is needed when encrypting a text buffer\&. This is always necessary, since encryptors typically generate encrypted text that is larger than the plain text input\&. Without such a call, WiredTiger would have no way to know the worst case for the encrypted buffer size\&. The WiredTiger encryption infrastructure assumes that buffer sizing is not dependent on the number of bytes of input, that there is a one to one relationship in number of bytes needed between input and output\&.
.PP
This callback cannot be NULL\&.
.PP
The callback should set \fCexpansion_constantp\fP to the additional number of bytes needed\&.
.PP
\fBParameters:\fP
.RS 4
\fIexpansion_constantp\fP the additional number of bytes needed when encrypting\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
zero for success, non-zero to indicate an error\&.
.RE
.PP
.PP
.nf
/*
 * nop_sizing --
 *      A simple sizing example that tells wiredtiger that the
 *      encrypted buffer is always the same as the source buffer\&.
 */
static int
nop_sizing(WT_ENCRYPTOR *encryptor, WT_SESSION *session,
    size_t *expansion_constantp)
{
        NOP_ENCRYPTOR *nop_encryptor = (NOP_ENCRYPTOR *)encryptor;

        (void)session;                          /* Unused parameters */

        ++nop_encryptor->nop_calls;             /* Call count */

        *expansion_constantp = 0;
        return (0);
}
.fi
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_encrypt\&.c\fP\&.
.SS "int(* WT_ENCRYPTOR::terminate) (\fBWT_ENCRYPTOR\fP *encryptor, \fBWT_SESSION\fP *session)"

.PP
If non-NULL, a callback performed when the database is closed\&. It is called for each encryptor that was added using \fBWT_CONNECTION::add_encryptor\fP or returned by the \fBWT_ENCRYPTOR::customize\fP callback\&.
.PP
The \fBWT_ENCRYPTOR::terminate\fP callback is intended to allow cleanup, the handle will not be subsequently accessed by WiredTiger\&.
.PP
.PP
.nf
/*
 * nop_terminate --
 *      WiredTiger no-op encryption termination\&.
 */
static int
nop_terminate(WT_ENCRYPTOR *encryptor, WT_SESSION *session)
{
        NOP_ENCRYPTOR *nop_encryptor = (NOP_ENCRYPTOR *)encryptor;

        (void)session;                          /* Unused parameters */

        ++nop_encryptor->nop_calls;             /* Call count */

        /* Free the allocated memory\&. */
        free(encryptor);

        return (0);
}
.fi
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_encrypt\&.c\fP\&.

.SH "Author"
.PP 
Generated automatically by Doxygen for WiredTiger from the source code\&.
