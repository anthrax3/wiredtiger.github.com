.TH "custom_file_systems" 3 "Fri Oct 7 2016" "Version Version 2.8.1" "WiredTiger" \" -*- nroff -*-
.ad l
.nh
.SH NAME
custom_file_systems \- Custom File Systems 
Applications can provide a custom file system implementation that will be used by WiredTiger to interact with the I/O subsystem using the \fBWT_FILE_SYSTEM\fP and \fBWT_FILE_HANDLE\fP interfaces\&.
.PP
It is not necessary for all file system providers to implement all methods in the \fBWT_FILE_SYSTEM\fP and \fBWT_FILE_HANDLE\fP structures, and documentation for those structures indicate which methods are optional\&. Methods which are not provided should be set to NULL\&.
.PP
Function pointers should not be cleared once a handle is created\&. (WiredTiger might check for a non-NULL method and then call it, and clearing the function pointer could result in a core dump\&.)
.PP
Function pointers are not expected to be cleared or set after a handle is created\&. An exception to this are the file extension methods, because existing file system implementations do not know the level of support the underlying system provides until after file extension is attempted\&. For this reason, these methods appear in both locking and non-locking versions\&. Custom file systems needing to discover system support before configuring non-locking methods should initialize only the locking version of the method, then either set the non-locking version of the method and clear the locking method (or clear both methods), after discovery is complete\&. Clearing the method value is safe because calls are serialized until a non-locking method is set\&. Note it is not possible to downgrade from a non-locking version of these methods to a locking version\&.
.PP
\fBWT_FILE_SYSTEM\fP and \fBWT_FILE_HANDLE\fP methods are expected to return POSIX 1003\&.1 or ANSI C standard error codes on failure\&. Custom file systems on Windows systems can use the \fBWT_EXTENSION_API::map_windows_error\fP method to translate Windows system errors into POSIX system errors for return to WiredTiger\&.
.PP
\fBWT_FILE_SYSTEM\fP and \fBWT_FILE_HANDLE\fP methods which fail, but where future calls may succeed (for example, a \fBWT_FILE_HANDLE::fh_truncate\fP method call which fails because the file is currently mapped into memory), should return EBUSY\&.
.PP
\fBWT_FILE_SYSTEM\fP and \fBWT_FILE_HANDLE\fP methods which fail, and no future calls will succeed, should return ENOTSUP\&. This failure may describe either the entire method being unavailable or a particular mode failure\&. For example, a \fBWT_FILE_HANDLE::fh_advise\fP method call with an argument of \fBWT_FILE_HANDLE_DONTNEED\fP, where the file handle doesn't support the \fBWT_FILE_HANDLE::fh_advise\fP method at all, or only supports the method argument \fBWT_FILE_HANDLE_WILLNEED\fP, should return ENOTSUP\&.
.PP
Additionally, custom file system functions may return \fBWT_PANIC\fP to shut down the system\&.
.PP
Unless explicitly stated otherwise, WiredTiger may invoke methods on the \fBWT_FILE_SYSTEM\fP and \fBWT_FILE_HANDLE\fP interfaces from multiple threads concurrently\&. It is the responsibility of the implementation to protect any shared data\&.
.PP
See \fBex_file_system\&.c\fP for an example implementation of a custom file system; the WiredTiger code for a POSIX standard file system is in the public domain and may also be useful as a starting point for a custom file system implementation\&. 
