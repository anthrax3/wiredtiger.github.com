.TH "compression_lang_java" 3 "Wed Apr 22 2015" "Version Version 2.5.3" "WiredTiger" \" -*- nroff -*-
.ad l
.nh
.SH NAME
compression_lang_java \- Compressors in Java 
This section explains how to configure WiredTiger's builtin support for the bzip2, lz4, snappy and zlib compression engines\&.
.SH "Using bzip2 compression"
.PP
To use the builtin support for \fCJulian Seward's bzip2\fP compression, first check that bzip2 is installed in include and library directories searched by the compiler\&. Once bzip2 is installed, you can enable bzip2 using the \fC--enable-bzip2\fP option to configure\&.
.PP
If bzip2 is installed in a location not normally searched by the compiler toolchain, you'll need to modify the \fCCPPFLAGS\fP and \fCLDFLAGS\fP to indicate these locations\&. For example, with the bzip2 includes and libraries installed in \fC/usr/local/include\fP and \fC/usr/local/lib\fP, you would run configure with the following additional arguments:
.PP
.PP
.nf
--enable-bzip2 CPPFLAGS="-I/usr/local/include" LDFLAGS="-L/usr/local/include"
.fi
.PP
.PP
When opening the WiredTiger database, load the bzip2 shared library as an extension\&. For example, with the WiredTiger library installed in \fC/usr/local/lib\fP, you would use the following extension:
.PP
.PP
.nf
    conn = wiredtiger\&.open(home,
        "create," +
        "extensions=[/usr/local/lib/libwiredtiger_bzip2\&.so]");
.fi
.PP
 Finally, when creating the WiredTiger object, set \fCblock_compressor\fP to \fCbzip2:\fP 
.PP
.PP
.nf
    ret = session\&.create("table:mytable",
        "block_compressor=bzip2,key_format=S,value_format=S");
.fi
.PP
 
.SH "Using LZ4 compression"
.PP
To use the builtin support for Yann Collet's \fCLZ4\fP compression, first check that LZ4 is installed in include and library directories searched by the compiler\&. Once LZ4 is installed, you can enable LZ4 using the \fC--enable-lz4\fP option to configure\&.
.PP
If LZ4 is installed in a location not normally searched by the compiler toolchain, you'll need to modify the \fCCPPFLAGS\fP and \fCLDFLAGS\fP to indicate these locations\&. For example, with the LZ4 includes and libraries installed in \fC/usr/local/include\fP and \fC/usr/local/lib\fP, you would run configure with the following additional arguments:
.PP
.PP
.nf
--enable-lz4 CPPFLAGS="-I/usr/local/include" LDFLAGS="-L/usr/local/include"
.fi
.PP
.PP
When opening the WiredTiger database, load the LZ4 shared library as an extension\&. For example, with the WiredTiger library installed in \fC/usr/local/lib\fP, you would use the following extension:
.PP
.PP
.nf
    conn = wiredtiger\&.open(home,
        "create," +
        "extensions=[/usr/local/lib/libwiredtiger_lz4\&.so]");
.fi
.PP
 Finally, when creating the WiredTiger object, set \fCblock_compressor\fP to \fClz4:\fP 
.PP
.PP
.nf
    ret = session\&.create("table:mytable",
        "block_compressor=lz4,key_format=S,value_format=S");
.fi
.PP
 
.SH "Using snappy compression"
.PP
To use the builtin support for \fCGoogle's snappy\fP compression, first check that snappy is installed in include and library directories searched by the compiler\&. Once snappy is installed, you can enable snappy using the \fC--enable-snappy\fP option to configure\&.
.PP
If snappy is installed in a location not normally searched by the compiler toolchain, you'll need to modify the \fCCPPFLAGS\fP and \fCLDFLAGS\fP to indicate these locations\&. For example, with the snappy includes and libraries installed in \fC/usr/local/include\fP and \fC/usr/local/lib\fP, you would run configure with the following additional arguments:
.PP
.PP
.nf
--enable-snappy CPPFLAGS="-I/usr/local/include" LDFLAGS="-L/usr/local/include"
.fi
.PP
.PP
When opening the WiredTiger database, load the snappy shared library as an extension\&. For example, with the WiredTiger library installed in \fC/usr/local/lib\fP, you would use the following extension:
.PP
.PP
.nf
    conn = wiredtiger\&.open(home,
        "create," +
        "extensions=[/usr/local/lib/libwiredtiger_snappy\&.so]");
.fi
.PP
 Finally, when creating the WiredTiger object, set \fCblock_compressor\fP to \fCsnappy:\fP 
.PP
.PP
.nf
    ret = session\&.create("table:mytable",
        "block_compressor=snappy,key_format=S,value_format=S");
.fi
.PP
 
.SH "Using zlib compression"
.PP
To use the builtin support for Greg Roelofs' and Mark Adler's \fCzlib\fP compression, first check that zlib is installed in include and library directories searched by the compiler\&. Once zlib is installed, you can enable zlib using the \fC--enable-zlib\fP option to configure\&.
.PP
If zlib is installed in a location not normally searched by the compiler toolchain, you'll need to modify the \fCCPPFLAGS\fP and \fCLDFLAGS\fP to indicate these locations\&. For example, with the zlib includes and libraries installed in \fC/usr/local/include\fP and \fC/usr/local/lib\fP, you would run configure with the following additional arguments:
.PP
.PP
.nf
--enable-zlib CPPFLAGS="-I/usr/local/include" LDFLAGS="-L/usr/local/include"
.fi
.PP
.PP
When opening the WiredTiger database, load the zlib shared library as an extension\&. For example, with the WiredTiger library installed in \fC/usr/local/lib\fP, you would use the following extension:
.PP
.PP
.nf
    conn = wiredtiger\&.open(home,
        "create," +
        "extensions=[/usr/local/lib/libwiredtiger_zlib\&.so]");
.fi
.PP
 Finally, when creating the WiredTiger object, set \fCblock_compressor\fP to \fCzlib:\fP 
.PP
.PP
.nf
    ret = session\&.create("table:mytable",
        "block_compressor=zlib,key_format=S,value_format=S");
.fi
.PP
 
.SH "Upgrading compression engines"
.PP
WiredTiger does not store information with file blocks to identify the compression engine used to compressed the block\&. Applications wanting to upgrade to some future compression engine (without requiring a file dump and re-load), should ensure each compressed block includes enough information to identify the compression engine used, so its compression code can correctly decompress old and new blocks\&.
.SH "Custom compression engines"
.PP
WiredTiger may be extended by adding custom compression engines; see \fBWT_COMPRESSOR\fP for more information\&. 
