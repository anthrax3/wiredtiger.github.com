.TH "basic_api_lang_java" 3 "Sat Apr 11 2015" "Version Version 2.5.3" "WiredTiger" \" -*- nroff -*-
.ad l
.nh
.SH NAME
basic_api_lang_java \- Getting Started with the API in Java 
WiredTiger applications will generally use the following classes to access and manage data:
.PP
.IP "\(bu" 2
a Connection represents a connection to a database\&. Most applications will only open one connection to a database for each process\&. All methods in Connection are thread safe\&.
.IP "\(bu" 2
a Session represents a context in which database operations are performed\&. Sessions are opened on a specified connection, and applications must open a single session for each thread accessing the database\&.
.IP "\(bu" 2
a Cursor represents a cursor over a collection of data\&. Cursors are opened in the context of a session (which may have an associated transaction), and can query and update records\&. In the common case, a cursor is used to access records in a table\&. However, cursors can be used on subsets of tables (such as a single column or a projection of multiple columns), as an interface to statistics, configuration data or application-specific data sources\&.
.PP
.PP
Handles and operations are \fBconfigured using strings\fP, which keeps the set of methods in the API relatively small and makes the interface very similar regardless of the programming language used in the application\&. WiredTiger supports the C, C++, Java and Python programming languages (among others)\&.
.PP
By default, WiredTiger works as a traditional key/value store, where the keys and values are raw byte arrays\&. Keys and values may be up to (4GB - 512B) bytes in size, but depending on how Session\&.create 'maximum item sizes' are configured, large key and value items will be stored on overflow pages\&.
.PP
WiredTiger also supports a \fBschema layer\fP so that keys and values types can be chosen from a list, or composite keys or values made up of columns with any combination of types\&. The size (4GB - 512B) byte limit on keys and values still applies\&.
.PP
All applications that use WiredTiger will be structured roughly as follows\&. The code below is taken from the complete example program ex_access\&.java\&.
.SH "Connecting to a database"
.PP
To access a database, first open a connection and create a session handle for the single thread accessing the database:
.PP
.PP
.nf
        Connection conn;
        Session s;
        Cursor c;

        try {
            conn = wiredtiger\&.open("WT_HOME", "create");
            s = conn\&.open_session(null);
        } catch (WiredTigerException wte) {
            System\&.err\&.println("WiredTigerException: " + wte);
            return;
        }
.fi
.PP
 The configuration string \fC'create'\fP is passed to \fCwiredtiger\&.open\fP to indicate the database should be created if it does not already exist\&.
.PP
The code block above also shows simple error handling by catching WiredTigerException\&.
.SH "Creating a table"
.PP
Create a table we can use to store data:
.PP
.PP
.nf
            s\&.create("table:t", "key_format=S,value_format=u");
.fi
.PP
 This call creates a table called \fC'access'\fP, configured to use strings for its key and value columns\&. (See \fBSchema, Columns, Column Groups, Indices and Projections in Java\fP for more information on tables with other types of key and value columns\&.)
.SH "Accessing data with cursors"
.PP
Now that we have a table, we open a cursor to perform some operations on it:
.PP
.PP
.nf
            c = s\&.open_cursor("table:t", null, null);
.fi
.PP
 Here, the string \fC'table:access'\fP specifies that we are opening the cursor on the table named \fC'access'\fP\&.
.PP
Then we insert a new row into the table\&. The Cursor\&.set_key and Cursor\&.set_value calls put the application's key and value into the cursor, respectively\&. The Cursor\&.insert call creates a record containing that value and inserts it into the table\&.
.PP
.PP
.nf
        try {
            c\&.putKeyString("foo");
            c\&.putValueByteArray("bar"\&.getBytes());
            c\&.insert();
        } catch (WiredTigerPackingException wtpe) {
            System\&.err\&.println("WiredTigerPackingException: " + wtpe);
        } catch (WiredTigerException wte) {
            System\&.err\&.println("WiredTigerException: " + wte);
        }
.fi
.PP
 Now we iterate through all of the records in the table, printing them out as we go:
.PP
.PP
.nf
        try {
            c\&.reset();
            while (c\&.next() == 0) {
                System\&.out\&.println("Got: " + c\&.getKeyString());
            }
        } catch (WiredTigerPackingException wtpe) {
            System\&.err\&.println("WiredTigerPackingException: " + wtpe);
        } catch (WiredTigerException wte) {
            System\&.err\&.println("WiredTigerException: " + wte);
        }
.fi
.PP
 Note that the key and value parts of the records are returned as C strings because the table was created that way (even if it was created by a previous run of the example)\&. No data extraction or conversion is required in the application\&.
.PP
Because the cursor was positioned in the table after the Cursor\&.insert call, we had to re-position it using the Cursor\&.first call; if we weren't using the cursor for the call to Cursor\&.insert above, this loop would simplify to:
.PP
.PP
.nf
while ((ret = cursor->next(cursor)) == 0) {
        \&.\&.\&.
}
.fi
.PP
.SH "Closing handles"
.PP
Lastly, we close the connection, which implicitly closes the cursor and session handles:
.PP
.PP
.nf
        try {
            conn\&.close(null);
        } catch (WiredTigerException wte) {
            System\&.err\&.println("WiredTigerException: " + wte);
        }
.fi
.PP

