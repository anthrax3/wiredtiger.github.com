.TH "WT_CURSOR" 3 "Sat Apr 11 2015" "Version Version 2.5.3" "WiredTiger" \" -*- nroff -*-
.ad l
.nh
.SH NAME
WT_CURSOR \- 
.PP
A \fBWT_CURSOR\fP handle is the interface to a cursor\&.  

.SH SYNOPSIS
.br
.PP
.SS "Public Member Functions"

.in +1c
.ti -1c
.RI "int \fBclose\fP (\fBWT_CURSOR\fP *cursor)"
.br
.RI "\fIClose the cursor\&. \fP"
.ti -1c
.RI "int \fBreconfigure\fP (\fBWT_CURSOR\fP *cursor, const char *config)"
.br
.RI "\fIReconfigure the cursor\&. \fP"
.in -1c
.PP
.RI "\fBData access\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "int \fBget_key\fP (\fBWT_CURSOR\fP *cursor,\&.\&.\&.)"
.br
.RI "\fIGet the key for the current record\&. \fP"
.ti -1c
.RI "int \fBget_value\fP (\fBWT_CURSOR\fP *cursor,\&.\&.\&.)"
.br
.RI "\fIGet the value for the current record\&. \fP"
.ti -1c
.RI "void \fBset_key\fP (\fBWT_CURSOR\fP *cursor,\&.\&.\&.)"
.br
.RI "\fISet the key for the next operation\&. \fP"
.ti -1c
.RI "void \fBset_value\fP (\fBWT_CURSOR\fP *cursor,\&.\&.\&.)"
.br
.RI "\fISet the value for the next operation\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBCursor positioning\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "int \fBcompare\fP (\fBWT_CURSOR\fP *cursor, \fBWT_CURSOR\fP *other, int *comparep)"
.br
.RI "\fIReturn the ordering relationship between two cursors: both cursors must have the same data source and have valid keys\&. \fP"
.ti -1c
.RI "int \fBequals\fP (\fBWT_CURSOR\fP *cursor, \fBWT_CURSOR\fP *other, int *equalp)"
.br
.RI "\fIReturn the ordering relationship between two cursors, testing only for equality: both cursors must have the same data source and have valid keys\&. \fP"
.ti -1c
.RI "int \fBnext\fP (\fBWT_CURSOR\fP *cursor)"
.br
.RI "\fIReturn the next record\&. \fP"
.ti -1c
.RI "int \fBprev\fP (\fBWT_CURSOR\fP *cursor)"
.br
.RI "\fIReturn the previous record\&. \fP"
.ti -1c
.RI "int \fBreset\fP (\fBWT_CURSOR\fP *cursor)"
.br
.RI "\fIReset the cursor\&. \fP"
.ti -1c
.RI "int \fBsearch\fP (\fBWT_CURSOR\fP *cursor)"
.br
.RI "\fIReturn the record matching the key\&. \fP"
.ti -1c
.RI "int \fBsearch_near\fP (\fBWT_CURSOR\fP *cursor, int *exactp)"
.br
.RI "\fIReturn the record matching the key if it exists, or an adjacent record\&. \fP"
.in -1c
.in -1c
.PP
.RI "\fBData modification\fP"
.br

.in +1c
.in +1c
.ti -1c
.RI "int \fBinsert\fP (\fBWT_CURSOR\fP *cursor)"
.br
.RI "\fIInsert a record and optionally update an existing record\&. \fP"
.ti -1c
.RI "int \fBupdate\fP (\fBWT_CURSOR\fP *cursor)"
.br
.RI "\fIUpdate a record and optionally insert an existing record\&. \fP"
.ti -1c
.RI "int \fBremove\fP (\fBWT_CURSOR\fP *cursor)"
.br
.RI "\fIRemove a record\&. \fP"
.in -1c
.in -1c
.SS "Public Attributes"

.in +1c
.ti -1c
.RI "\fBWT_SESSION\fP * \fBsession\fP"
.br
.RI "\fIThe session handle for this cursor\&. \fP"
.ti -1c
.RI "const char * \fBuri\fP"
.br
.RI "\fIThe name of the data source for the cursor, matches the \fCuri\fP parameter to \fBWT_SESSION::open_cursor\fP used to open the cursor\&. \fP"
.ti -1c
.RI "const char * \fBkey_format\fP"
.br
.RI "\fIThe format of the data packed into key items\&. \fP"
.ti -1c
.RI "const char * \fBvalue_format\fP"
.br
.RI "\fIThe format of the data packed into value items\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
A \fBWT_CURSOR\fP handle is the interface to a cursor\&. 

Cursors allow data to be searched, iterated and modified, implementing the CRUD (create, read, update and delete) operations\&. Cursors are opened in the context of a session\&. If a transaction is started, cursors operate in the context of the transaction until the transaction is resolved\&.
.PP
Raw data is represented by key/value pairs of \fBWT_ITEM\fP structures, but cursors can also provide access to fields within the key and value if the formats are described in the \fBWT_SESSION::create\fP method\&.
.PP
In the common case, a cursor is used to access records in a table\&. However, cursors can be used on subsets of tables (such as a single column or a projection of multiple columns), as an interface to statistics, configuration data or application-specific data sources\&. See \fBWT_SESSION::open_cursor\fP for more information\&.
.PP
\fBThread safety:\fP A \fBWT_CURSOR\fP handle is not usually shared between threads, see \fBMultithreading\fP for more information\&. 
.PP
\fBExamples: \fP
.in +1c
\fBex_access\&.c\fP, \fBex_call_center\&.c\fP, \fBex_config\&.c\fP, \fBex_cursor\&.c\fP, \fBex_extractor\&.c\fP, \fBex_log\&.c\fP, \fBex_schema\&.c\fP, \fBex_stat\&.c\fP, and \fBex_thread\&.c\fP\&.
.SH "Member Function Documentation"
.PP 
.SS "int WT_CURSOR::close (\fBWT_CURSOR\fP *cursor)"

.PP
Close the cursor\&. This releases the resources associated with the cursor handle\&. Cursors are closed implicitly by ending the enclosing connection or closing the session in which they were opened\&.
.PP
.PP
.nf
   ret = cursor->close(cursor);
.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP the cursor handle 
.RE
.PP
\fBReturns:\fP
.RS 4
zero on success and a non-zero error code on failure\&. See \fBError Returns\fP for details\&. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_call_center\&.c\fP, \fBex_cursor\&.c\fP, \fBex_extractor\&.c\fP, \fBex_log\&.c\fP, \fBex_schema\&.c\fP, and \fBex_stat\&.c\fP\&.
.SS "int WT_CURSOR::compare (\fBWT_CURSOR\fP *cursor, \fBWT_CURSOR\fP *other, int *comparep)"

.PP
Return the ordering relationship between two cursors: both cursors must have the same data source and have valid keys\&. (When testing only for equality, \fBWT_CURSOR::equals\fP may be faster\&.)
.PP
.PP
.nf
      int compare;
        ret = cursor->compare(cursor, other, &compare);
        if (compare == 0) {
                /* Cursors reference the same key */
        } else if (compare < 0) {
                /* Cursor key less than other key */
        } else if (compare > 0) {
                /* Cursor key greater than other key */
        }
.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP the cursor handle 
.br
\fIother\fP another cursor handle 
.br
\fIcomparep\fP the status of the comparison: < 0 if \fCcursor\fP refers to a key that appears before \fCother\fP, 0 if the cursors refer to the same key, and > 0 if \fCcursor\fP refers to a key that appears after \fCother\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
zero on success and a non-zero error code on failure\&. See \fBError Returns\fP for details\&. 
.RE
.PP

.SS "int WT_CURSOR::equals (\fBWT_CURSOR\fP *cursor, \fBWT_CURSOR\fP *other, int *equalp)"

.PP
Return the ordering relationship between two cursors, testing only for equality: both cursors must have the same data source and have valid keys\&. 
.PP
.nf
        int equal;
        ret = cursor->equals(cursor, other, &equal);
        if (equal) {
                /* Cursors reference the same key */
        } else {
                /* Cursors don't reference the same key */
        }

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP the cursor handle 
.br
\fIother\fP another cursor handle 
.br
\fIequalp\fP the status of the comparison: 1 if the cursors refer to the same key, otherwise 0\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
zero on success and a non-zero error code on failure\&. See \fBError Returns\fP for details\&. 
.RE
.PP

.SS "int WT_CURSOR::get_key (\fBWT_CURSOR\fP *cursor, \&.\&.\&.)"

.PP
Get the key for the current record\&. 
.PP
.nf
    const char *key;        /* Get the cursor's string key\&. */
        ret = cursor->get_key(cursor, &key);

.fi
.PP
 
.PP
.nf
        uint64_t recno;         /* Get the cursor's record number key\&. */
        ret = cursor->get_key(cursor, &recno);

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP the cursor handle 
.br
\fI\&.\&.\&.\fP pointers to hold key fields corresponding to \fBWT_CURSOR::key_format\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
zero on success and a non-zero error code on failure\&. See \fBError Returns\fP for details\&. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_access\&.c\fP, \fBex_config\&.c\fP, \fBex_cursor\&.c\fP, \fBex_log\&.c\fP, \fBex_schema\&.c\fP, and \fBex_thread\&.c\fP\&.
.SS "int WT_CURSOR::get_value (\fBWT_CURSOR\fP *cursor, \&.\&.\&.)"

.PP
Get the value for the current record\&. 
.PP
.nf
 const char *value;      /* Get the cursor's string value\&. */
        ret = cursor->get_value(cursor, &value);

.fi
.PP
 
.PP
.nf
        WT_ITEM value;          /* Get the cursor's raw value\&. */
        ret = cursor->get_value(cursor, &value);

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP the cursor handle 
.br
\fI\&.\&.\&.\fP pointers to hold value fields corresponding to \fBWT_CURSOR::value_format\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
zero on success and a non-zero error code on failure\&. See \fBError Returns\fP for details\&. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_access\&.c\fP, \fBex_call_center\&.c\fP, \fBex_config\&.c\fP, \fBex_cursor\&.c\fP, \fBex_extractor\&.c\fP, \fBex_log\&.c\fP, \fBex_schema\&.c\fP, \fBex_stat\&.c\fP, and \fBex_thread\&.c\fP\&.
.SS "int WT_CURSOR::insert (\fBWT_CURSOR\fP *cursor)"

.PP
Insert a record and optionally update an existing record\&. If the cursor was configured with 'overwrite=true' (the default), both the key and value must be set; if the record already exists, the key's value will be updated, otherwise, the record will be inserted\&.
.PP
.PP
.nf
  /* Insert a new record or overwrite an existing record\&. */
        const char *key = "some key", *value = "some value";
        ret = session->open_cursor(
            session, "table:mytable", NULL, NULL, &cursor);
        cursor->set_key(cursor, key);
        cursor->set_value(cursor, value);
        ret = cursor->insert(cursor);
.fi
.PP
 If the cursor was not configured with 'overwrite=true', both the key and value must be set and the record must not already exist; the record will be inserted\&.
.PP
.PP
.nf
        /* Insert a new record and fail if the record exists\&. */
        const char *key = "some key", *value = "some value";
        ret = session->open_cursor(
            session, "table:mytable", NULL, "overwrite=false", &cursor);
        cursor->set_key(cursor, key);
        cursor->set_value(cursor, value);
        ret = cursor->insert(cursor);
.fi
.PP
 If a cursor with record number keys was configured with 'append=true' (not the default), the value must be set; a new record will be appended and the record number set as the cursor key value\&.
.PP
.PP
.nf
        /* Insert a new record and assign a record number\&. */
        uint64_t recno;
        const char *value = "some value";
        ret = session->open_cursor(
            session, "table:mytable", NULL, "append", &cursor);
        cursor->set_value(cursor, value);
        ret = cursor->insert(cursor);
        if (ret == 0)
                ret = cursor->get_key(cursor, &recno);
.fi
.PP
 The cursor ends with no position, and a subsequent call to the \fBWT_CURSOR::next\fP (\fBWT_CURSOR::prev\fP) method will iterate from the beginning (end) of the table\&.
.PP
Inserting a new record after the current maximum record in a fixed-length bit field column-store (that is, a store with an 'r' type key and 't' type value) may implicitly create the missing records as records with a value of 0\&.
.PP
When loading a large amount of data into a new object, using a cursor with the \fCbulk\fP configuration string enabled and loading the data in sorted order will be much faster than doing out-of-order inserts\&. See \fBBulk-load\fP for more information\&.
.PP
The maximum length of a single column stored in a table is not fixed (as it partially depends on the underlying file configuration), but is always a small number of bytes less than 4GB\&.
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP the cursor handle 
.RE
.PP
\fBReturns:\fP
.RS 4
zero on success and a non-zero error code on failure\&. See \fBError Returns\fP for details\&. In particular, if \fCoverwrite\fP is not configured and a record with the specified key already exists, \fBWT_DUPLICATE_KEY\fP is returned\&. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_access\&.c\fP, \fBex_call_center\&.c\fP, \fBex_cursor\&.c\fP, \fBex_extractor\&.c\fP, \fBex_log\&.c\fP, \fBex_schema\&.c\fP, \fBex_stat\&.c\fP, and \fBex_thread\&.c\fP\&.
.SS "int WT_CURSOR::next (\fBWT_CURSOR\fP *cursor)"

.PP
Return the next record\&. 
.PP
.nf
      ret = cursor->next(cursor);

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP the cursor handle 
.RE
.PP
\fBReturns:\fP
.RS 4
zero on success and a non-zero error code on failure\&. See \fBError Returns\fP for details\&. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_access\&.c\fP, \fBex_config\&.c\fP, \fBex_cursor\&.c\fP, \fBex_log\&.c\fP, \fBex_schema\&.c\fP, \fBex_stat\&.c\fP, and \fBex_thread\&.c\fP\&.
.SS "int WT_CURSOR::prev (\fBWT_CURSOR\fP *cursor)"

.PP
Return the previous record\&. 
.PP
.nf
        ret = cursor->prev(cursor);

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP the cursor handle 
.RE
.PP
\fBReturns:\fP
.RS 4
zero on success and a non-zero error code on failure\&. See \fBError Returns\fP for details\&. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_call_center\&.c\fP, and \fBex_cursor\&.c\fP\&.
.SS "int WT_CURSOR::reconfigure (\fBWT_CURSOR\fP *cursor, const char *config)"

.PP
Reconfigure the cursor\&. The cursor is reset\&.
.PP
.PP
.nf
     ret = session->open_cursor(
            session, "table:mytable", NULL, "overwrite=false", &cursor);
        cursor->set_key(cursor, key);
        cursor->set_value(cursor, value);

        /* Reconfigure the cursor to overwrite the record\&. */
        ret = cursor->reconfigure(cursor, "overwrite=true");
        ret = cursor->insert(cursor);
.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP the cursor handle 
.br
\fIconfig\fP Configuration string, see \fBConfiguration Strings\fP\&. Permitted values: NameEffectValues \fCappend\fPappend the value as a new record, creating a new record number key; valid only for cursors with record number keys\&.a boolean flag; default \fCfalse\fP\&. \fCoverwrite\fPconfigures whether the cursor's insert, update and remove methods check the existing state of the record\&. If \fCoverwrite\fP is \fCfalse\fP, \fBWT_CURSOR::insert\fP fails with \fBWT_DUPLICATE_KEY\fP if the record exists, \fBWT_CURSOR::update\fP and \fBWT_CURSOR::remove\fP fail with \fBWT_NOTFOUND\fP if the record does not exist\&.a boolean flag; default \fCtrue\fP\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
zero on success and a non-zero error code on failure\&. See \fBError Returns\fP for details\&. 
.RE
.PP

.SS "int WT_CURSOR::remove (\fBWT_CURSOR\fP *cursor)"

.PP
Remove a record\&. If the cursor was configured with 'overwrite=true' (the default), the key must be set; the key's record will be removed if it exists, no error will be returned if the record does not exist\&.
.PP
.PP
.nf
       const char *key = "some key";
        ret = session->open_cursor(
            session, "table:mytable", NULL, NULL, &cursor);
        cursor->set_key(cursor, key);
        ret = cursor->remove(cursor);
.fi
.PP
 If the cursor was not configured with 'overwrite=true', the key must be set and the key's record must exist; the record will be removed\&.
.PP
.PP
.nf
        const char *key = "some key";
        ret = session->open_cursor(
            session, "table:mytable", NULL, "overwrite=false", &cursor);
        cursor->set_key(cursor, key);
        ret = cursor->remove(cursor);
.fi
.PP
 Removing a record in a fixed-length bit field column-store (that is, a store with an 'r' type key and 't' type value) is identical to setting the record's value to 0\&.
.PP
On success, the cursor ends positioned at the removed record; to minimize cursor resources, the \fBWT_CURSOR::reset\fP method should be called as soon as the cursor no longer needs that position\&.
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP the cursor handle 
.RE
.PP
\fBReturns:\fP
.RS 4
zero on success and a non-zero error code on failure\&. See \fBError Returns\fP for details\&. In particular, if \fCoverwrite\fP is not configured and no record with the specified key exists, \fBWT_NOTFOUND\fP is returned\&. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_cursor\&.c\fP, and \fBex_extractor\&.c\fP\&.
.SS "int WT_CURSOR::reset (\fBWT_CURSOR\fP *cursor)"

.PP
Reset the cursor\&. Any resources held by the cursor are released, and the cursor's key and position are no longer valid\&. Subsequent iterations with \fBWT_CURSOR::next\fP will move to the first record, or with \fBWT_CURSOR::prev\fP will move to the last record\&.
.PP
In the case of a statistics cursor, resetting the cursor refreshes the statistics information returned\&.
.PP
.PP
.nf
 ret = cursor->reset(cursor);
.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP the cursor handle 
.RE
.PP
\fBReturns:\fP
.RS 4
zero on success and a non-zero error code on failure\&. See \fBError Returns\fP for details\&. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_access\&.c\fP, \fBex_cursor\&.c\fP, and \fBex_log\&.c\fP\&.
.SS "int WT_CURSOR::search (\fBWT_CURSOR\fP *cursor)"

.PP
Return the record matching the key\&. The key must first be set\&.
.PP
.PP
.nf
    const char *key = "some key";
        cursor->set_key(cursor, key);
        ret = cursor->search(cursor);
.fi
.PP
 On success, the cursor ends positioned at the returned record; to minimize cursor resources, the \fBWT_CURSOR::reset\fP method should be called as soon as the record has been retrieved and the cursor no longer needs that position\&.
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP the cursor handle 
.RE
.PP
\fBReturns:\fP
.RS 4
zero on success and a non-zero error code on failure\&. See \fBError Returns\fP for details\&. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_call_center\&.c\fP, \fBex_cursor\&.c\fP, \fBex_extractor\&.c\fP, \fBex_log\&.c\fP, \fBex_schema\&.c\fP, and \fBex_stat\&.c\fP\&.
.SS "int WT_CURSOR::search_near (\fBWT_CURSOR\fP *cursor, int *exactp)"

.PP
Return the record matching the key if it exists, or an adjacent record\&. An adjacent record is either the smallest record larger than the key or the largest record smaller than the key (in other words, a logically adjacent key)\&.
.PP
The key must first be set\&.
.PP
An example of a search for an exact or adjacent match:
.PP
.PP
.nf
      cursor->set_key(cursor, key);
        ret = cursor->search_near(cursor, &exact);
        if (ret == 0) {
                if (exact == 0) {
                        /* an exact match */
                } else if (exact < 0) {
                        /* returned smaller key */
                } else if (exact > 0) {
                        /* returned larger key */
                }
        }
.fi
.PP
 An example of a forward scan through the table, where all keys greater than or equal to a specified prefix are included in the scan:
.PP
.PP
.nf
        cursor->set_key(cursor, key);
        ret = cursor->search_near(cursor, &exact);
        if (ret == 0 && exact >= 0) {
                /* include first key returned in the scan */
        }

        while ((ret = cursor->next(cursor)) == 0) {
                /* the rest of the scan */
        }
.fi
.PP
 An example of a backward scan through the table, where all keys less than a specified prefix are included in the scan:
.PP
.PP
.nf
        cursor->set_key(cursor, key);
        ret = cursor->search_near(cursor, &exact);
        if (ret == 0 && exact < 0) {
                /* include first key returned in the scan */
        }

        while ((ret = cursor->prev(cursor)) == 0) {
                /* the rest of the scan */
        }
.fi
.PP
 On success, the cursor ends positioned at the returned record; to minimize cursor resources, the \fBWT_CURSOR::reset\fP method should be called as soon as the record has been retrieved and the cursor no longer needs that position\&.
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP the cursor handle 
.br
\fIexactp\fP the status of the search: 0 if an exact match is found, < 0 if a smaller key is returned, > 0 if a larger key is returned 
.RE
.PP
\fBReturns:\fP
.RS 4
zero on success and a non-zero error code on failure\&. See \fBError Returns\fP for details\&. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_call_center\&.c\fP, and \fBex_cursor\&.c\fP\&.
.SS "void WT_CURSOR::set_key (\fBWT_CURSOR\fP *cursor, \&.\&.\&.)"

.PP
Set the key for the next operation\&. 
.PP
.nf
                          /* Set the cursor's string key\&. */
        const char *key = "another key";
        cursor->set_key(cursor, key);

.fi
.PP
 
.PP
.nf
        uint64_t recno = 37;    /* Set the cursor's record number key\&. */
        cursor->set_key(cursor, recno);

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP the cursor handle 
.br
\fI\&.\&.\&.\fP key fields corresponding to \fBWT_CURSOR::key_format\fP\&.
.RE
.PP
If an error occurs during this operation, a flag will be set in the cursor, and the next operation to access the key will fail\&. This simplifies error handling in applications\&. 
.PP
\fBExamples: \fP
.in +1c
\fBex_access\&.c\fP, \fBex_call_center\&.c\fP, \fBex_cursor\&.c\fP, \fBex_extractor\&.c\fP, \fBex_log\&.c\fP, \fBex_schema\&.c\fP, \fBex_stat\&.c\fP, and \fBex_thread\&.c\fP\&.
.SS "void WT_CURSOR::set_value (\fBWT_CURSOR\fP *cursor, \&.\&.\&.)"

.PP
Set the value for the next operation\&. 
.PP
.nf
                              /* Set the cursor's string value\&. */
        const char *value = "another value";
        cursor->set_value(cursor, value);

.fi
.PP
 
.PP
.nf
        WT_ITEM value;          /* Set the cursor's raw value\&. */
        value\&.data = "another value";
        value\&.size = strlen("another value");
        cursor->set_value(cursor, &value);

.fi
.PP
 
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP the cursor handle 
.br
\fI\&.\&.\&.\fP value fields corresponding to \fBWT_CURSOR::value_format\fP\&.
.RE
.PP
If an error occurs during this operation, a flag will be set in the cursor, and the next operation to access the value will fail\&. This simplifies error handling in applications\&. 
.PP
\fBExamples: \fP
.in +1c
\fBex_access\&.c\fP, \fBex_call_center\&.c\fP, \fBex_cursor\&.c\fP, \fBex_extractor\&.c\fP, \fBex_log\&.c\fP, \fBex_schema\&.c\fP, \fBex_stat\&.c\fP, and \fBex_thread\&.c\fP\&.
.SS "int WT_CURSOR::update (\fBWT_CURSOR\fP *cursor)"

.PP
Update a record and optionally insert an existing record\&. If the cursor was configured with 'overwrite=true' (the default), both the key and value must be set; if the record already exists, the key's value will be updated, otherwise, the record will be inserted\&.
.PP
.PP
.nf
    const char *key = "some key", *value = "some value";
        ret = session->open_cursor(
            session, "table:mytable", NULL, NULL, &cursor);
        cursor->set_key(cursor, key);
        cursor->set_value(cursor, value);
        ret = cursor->update(cursor);
.fi
.PP
 If the cursor was not configured with 'overwrite=true', both the key and value must be set and the record must already exist; the record will be updated\&.
.PP
.PP
.nf
        const char *key = "some key", *value = "some value";
        ret = session->open_cursor(
            session, "table:mytable", NULL, "overwrite=false", &cursor);
        cursor->set_key(cursor, key);
        cursor->set_value(cursor, value);
        ret = cursor->update(cursor);
.fi
.PP
 On success, the cursor ends positioned at the modified record; to minimize cursor resources, the \fBWT_CURSOR::reset\fP method should be called as soon as the cursor no longer needs that position\&.
.PP
The maximum length of a single column stored in a table is not fixed (as it partially depends on the underlying file configuration), but is always a small number of bytes less than 4GB\&.
.PP
\fBParameters:\fP
.RS 4
\fIcursor\fP the cursor handle 
.RE
.PP
\fBReturns:\fP
.RS 4
zero on success and a non-zero error code on failure\&. See \fBError Returns\fP for details\&. In particular, if \fCoverwrite\fP is not configured and no record with the specified key exists, \fBWT_NOTFOUND\fP is returned\&. 
.RE
.PP

.PP
\fBExamples: \fP
.in +1c
\fBex_cursor\&.c\fP, and \fBex_schema\&.c\fP\&.
.SH "Member Data Documentation"
.PP 
.SS "const char* WT_CURSOR::key_format"

.PP
The format of the data packed into key items\&. See \fBPacking and Unpacking Data\fP for details\&. If not set, a default value of 'u' is assumed, and applications must use \fBWT_ITEM\fP structures to manipulate untyped byte arrays\&. 
.SS "\fBWT_SESSION\fP* WT_CURSOR::session"

.PP
The session handle for this cursor\&. 
.SS "const char* WT_CURSOR::value_format"

.PP
The format of the data packed into value items\&. See \fBPacking and Unpacking Data\fP for details\&. If not set, a default value of 'u' is assumed, and applications must use \fBWT_ITEM\fP structures to manipulate untyped byte arrays\&. 

.SH "Author"
.PP 
Generated automatically by Doxygen for WiredTiger from the source code\&.
