.TH "transactions" 3 "Fri Oct 7 2016" "Version Version 2.8.1" "WiredTiger" \" -*- nroff -*-
.ad l
.nh
.SH NAME
transactions \- Transactions 

.SH "ACID properties"
.PP
Transactions provide a powerful abstraction for multiple threads to operate on data concurrently because they have the following properties:
.PP
.IP "\(bu" 2
Atomicity: all or none of a transaction is completed\&.
.IP "\(bu" 2
Consistency: if each transaction maintains some property when considered separately, then the combined effect of executing the transactions concurrently will maintain the same property\&.
.IP "\(bu" 2
Isolation: developers can reason about transactions as if they run single-threaded\&.
.IP "\(bu" 2
Durability: once a transaction commits, its updates cannot be lost\&.
.PP
.PP
WiredTiger supports transactions with the following caveats to the ACID properties:
.PP
.IP "\(bu" 2
the maximum level of isolation supported is snapshot isolation\&. See \fBIsolation levels\fP for more details\&.
.IP "\(bu" 2
transactional updates are made durable by a combination of checkpoints and logging\&. See \fBCheckpoint durability\fP for information on checkpoint durability and \fBCommit-level durability\fP for information on commit-level durability\&.
.IP "\(bu" 2
each transaction's uncommitted changes must fit in memory: for efficiency, WiredTiger does not write to the log until a transaction commits\&.
.PP
.SH "Transactional API"
.PP
In WiredTiger, transaction operations are methods off the \fBWT_SESSION\fP class\&.
.PP
Applications call \fBWT_SESSION::begin_transaction\fP to start a new transaction\&. Operations subsequently performed using that \fBWT_SESSION\fP handle, including operations on any cursors open in that \fBWT_SESSION\fP handle (whether opened before or after the \fBWT_SESSION::begin_transaction\fP call), are part of the transaction and their effects committed by calling \fBWT_SESSION::commit_transaction\fP, or discarded by calling \fBWT_SESSION::rollback_transaction\fP\&.
.PP
If \fBWT_SESSION::commit_transaction\fP returns an error for any reason, the transaction was rolled back, not committed\&.
.PP
When transactions are used, data operations can encounter a conflict and fail with the \fBWT_ROLLBACK\fP error\&. If this error occurs, transactions should be rolled back with \fBWT_SESSION::rollback_transaction\fP and the operation retried\&.
.PP
The \fBWT_SESSION::rollback_transaction\fP method implicitly resets all cursors in the session as if the \fBWT_CURSOR::reset\fP method was called, discarding any cursor position as well as any key and value\&.
.PP
.PP
.nf
        /*
         * Cursors may be opened before or after the transaction begins, and in
         * either case, subsequent operations are included in the transaction\&.
         * Opening cursors before the transaction begins allows applications to
         * cache cursors and use them for multiple operations\&.
         */
        ret =
            session->open_cursor(session, "table:mytable", NULL, NULL, &cursor);
        ret = session->begin_transaction(session, NULL);

        cursor->set_key(cursor, "key");
        cursor->set_value(cursor, "value");
        switch (ret = cursor->update(cursor)) {
        case 0:                                 /* Update success */
                ret = session->commit_transaction(session, NULL);
                /*
                 * If commit_transaction succeeds, cursors remain positioned; if
                 * commit_transaction fails, the transaction was rolled-back and
                 * and all cursors are reset\&.
                 */
                break;
        case WT_ROLLBACK:                       /* Update conflict */
        default:                                /* Other error */
                ret = session->rollback_transaction(session, NULL);
                /* The rollback_transaction call resets all cursors\&. */
                break;
        }

        /*
         * Cursors remain open and may be used for multiple transactions\&.
         */
.fi
.PP
 
.SH "Implicit transactions"
.PP
If a cursor is used when no explicit transaction is active in a session, reads are performed at the isolation level of the session, set with the \fCisolation\fP key to \fBWT_CONNECTION::open_session\fP, and successful updates are automatically committed before the update operation returns\&.
.PP
Any operation consisting of multiple related updates should be enclosed in an explicit transaction to ensure the updates are applied atomically\&.
.PP
If an implicit transaction successfully commits, the cursors in the \fBWT_SESSION\fP remain positioned\&. If an implicit transaction fails, all cursors in the \fBWT_SESSION\fP are reset, as if \fBWT_CURSOR::reset\fP were called, discarding any position or key/value information they may have\&.
.PP
See \fBCursors and Transactions\fP for more information\&.
.SH "Concurrency control"
.PP
WiredTiger uses optimistic concurrency control algorithms\&. This avoids the bottleneck of a centralized lock manager and ensures transactional operations do not block: reads do not block writes, and vice versa\&.
.PP
Further, writes do not block writes, although concurrent transactions updating the same value will fail with \fBWT_ROLLBACK\fP\&. Some applications may benefit from application-level synchronization to avoid repeated attempts to rollback and update the same value\&.
.PP
Operations in transactions may also fail with the \fBWT_ROLLBACK\fP error if some resource cannot be allocated after repeated attempts\&. For example, if the cache is not large enough to hold the updates required to satisfy transactional readers, an operation may fail and return \fBWT_ROLLBACK\fP\&.
.SH "Isolation levels"
.PP
WiredTiger supports \fCread-uncommitted\fP, \fCread-committed\fP and \fCsnapshot\fP isolation levels; the default isolation level is \fCread-committed\fP\&.
.PP
.IP "\(bu" 2
\fCread-uncommitted\fP: Transactions can see changes made by other transactions before those transactions are committed\&. Dirty reads, non-repeatable reads and phantoms are possible\&.
.IP "\(bu" 2
\fCread-committed\fP: Transactions cannot see changes made by other transactions before those transactions are committed\&. Dirty reads are not possible; non-repeatable reads and phantoms are possible\&. Committed changes from concurrent transactions become visible when no cursor is positioned in the read-committed transaction\&.
.IP "\(bu" 2
\fCsnapshot\fP: Transactions read the versions of records committed before the transaction started\&. Dirty reads and non-repeatable reads are not possible; phantoms are possible\&.
.br

.br
 Snapshot isolation is a strong guarantee, but not equivalent to a single-threaded execution of the transactions, known as serializable isolation\&. Concurrent transactions T1 and T2 running under snapshot isolation may both commit and produce a state that neither (T1 followed by T2) nor (T2 followed by T1) could have produced, if there is overlap between T1's reads and T2's writes, and between T1's writes and T2's reads\&.
.PP
.PP
The transaction isolation level can be configured on a per-transaction basis:
.PP
.PP
.nf
        /* A single transaction configured for snapshot isolation\&. */
        ret =
            session->open_cursor(session, "table:mytable", NULL, NULL, &cursor);
        ret = session->begin_transaction(session, "isolation=snapshot");
        cursor->set_key(cursor, "some-key");
        cursor->set_value(cursor, "some-value");
        ret = cursor->update(cursor);
        ret = session->commit_transaction(session, NULL);
.fi
.PP
 Additionally, the default transaction isolation can be configured and re-configured on a per-session basis:
.PP
.PP
.nf
        /* Open a session configured for read-uncommitted isolation\&. */
        ret = conn->open_session(
            conn, NULL, "isolation=read_uncommitted", &session);
.fi
.PP
 
.PP
.nf
        /* Re-configure a session for snapshot isolation\&. */
        ret = session->reconfigure(session, "isolation=snapshot");

.fi
.PP
 
.SH "Named Snapshots"
.PP
Applications can create named snapshots by calling \fBWT_SESSION::snapshot\fP with a configuration that includes \fC'name=foo'\fP\&. This configuration creates a new named snapshot, as if a snapshot isolation transaction were started at the time of the \fBWT_SESSION::snapshot\fP call\&.
.PP
Subsequent transactions can be started 'as of' that snapshot by calling \fBWT_SESSION::begin_transaction\fP with a configuration that includes \fCsnapshot=foo\fP\&. That transaction will run at snapshot isolation as if the transaction started at the time of the \fBWT_SESSION::snapshot\fP call that created the snapshot\&.
.PP
Named snapshots keep data pinned in cache as if a real transaction were running for the time that the named transaction is active\&. The resources associated with named snapshots should be released by calling \fBWT_SESSION::snapshot\fP with a configuration that includes \fC'drop='\fP\&. See \fBWT_SESSION::snapshot\fP documentation for details of the semantics supported by the drop configuration\&.
.PP
Named snapshots are not durable: they do not survive \fBWT_CONNECTION::close\fP\&. 
