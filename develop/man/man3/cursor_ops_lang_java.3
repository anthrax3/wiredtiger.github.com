.TH "cursor_ops_lang_java" 3 "Sat Apr 11 2015" "Version Version 2.5.3" "WiredTiger" \" -*- nroff -*-
.ad l
.nh
.SH NAME
cursor_ops_lang_java \- Cursor operations in Java 
Common operations in WiredTiger are performed using Cursor handles\&. A cursor includes:
.PP
.IP "\(bu" 2
a position within a data source
.IP "\(bu" 2
getter/setters for key and value fields
.IP "\(bu" 2
encoding of fields to store in the data source
.IP "\(bu" 2
methods to navigate within and iterate through the data
.PP
.SH "Opening a cursor"
.PP
Cursors are created using the Session\&.open_cursor method\&. For example, from the program ex_cursor\&.java:
.PP
.PP
.nf
        cursor = session\&.open_cursor("table:world", null, null);
.fi
.PP
 Another example from the same program:
.PP
.PP
.nf
        cursor = session\&.open_cursor("table:world(country,population)", null, null);
.fi
.PP
 In addition to traditional data sources, cursors in WiredTiger are used to access projections and even created data sources such as the run-time statistics:
.PP
.PP
.nf
        cursor = session\&.open_cursor("statistics:", null, null);
.fi
.PP
 See \fBCursors in Java\fP for more information on available cursor types\&.
.SH "Closing a cursor"
.PP
Cursors remain open until either Cursor\&.close is called or the cursor's session is closed, which may either be in Session\&.close or Connection\&.close\&.
.SH "Positioning a cursor"
.PP
Cursors may be positioned at the beginning of the data source, the end of the data source, at an exact key within the data source, and near a key within the data source\&.
.PP
To invalidate the position of a cursor so that subsequent iterations start from the beginning or end of the data source, use the Cursor\&.reset method:
.PP
.PP
.nf
    public static int
    cursor_reset(Cursor cursor)
        throws WiredTigerException
    {
        return (cursor\&.reset());
    }
.fi
.PP
 To move a cursor forward in the data source, use the cursor Cursor\&.next method:
.PP
.PP
.nf
    public static int
    cursor_forward_scan(Cursor cursor)
        throws WiredTigerException
    {
        String key, value;
        int ret;

        while ((ret = cursor\&.next()) == 0) {
            key = cursor\&.getKeyString();
            value = cursor\&.getValueString();
        }
        return (ret);
    }
.fi
.PP
 If the Cursor\&.next method is called on a cursor without a position in the data source, it is positioned at the beginning of the data source\&.
.PP
To move a cursor backward in the data source, use the cursor Cursor\&.prev method:
.PP
.PP
.nf
    public static int
    cursor_reverse_scan(Cursor cursor)
        throws WiredTigerException
    {
        String key, value;
        int ret;

        while ((ret = cursor\&.prev()) == 0) {
            key = cursor\&.getKeyString();
            value = cursor\&.getValueString();
        }
        return (ret);
    }
.fi
.PP
 If the Cursor\&.prev method is called on a cursor without a position in the data source, it is positioned at the end of the data source\&.
.PP
To position a cursor at a specific location in the data source, use the Cursor\&.search method:
.PP
.PP
.nf
    public static int
    cursor_search(Cursor cursor)
        throws WiredTigerException
    {
        String value;
        int ret;

        cursor\&.putKeyString("foo");

        if ((ret = cursor\&.search()) != 0)
            value = cursor\&.getValueString();

        return (ret);
    }
.fi
.PP
 To position a cursor at or near a location in the data source, use the Cursor\&.search_near method:
.PP
.PP
.nf
    public static int
    cursor_search_near(Cursor cursor)
        throws WiredTigerException
    {
        String key, value;
        SearchStatus exact;

        key = "foo";
        cursor\&.putKeyString(key);

        exact = cursor\&.search_near();
        if (exact == SearchStatus\&.SMALLER)
            /* Returned key smaller than search key */
            key = cursor\&.getKeyString();
        else if (exact == SearchStatus\&.LARGER)
            /* Returned key larger than search key */
            key = cursor\&.getKeyString();
        /* Else exact match found, and key already set */

        value = cursor\&.getValueString();

        return (0);
    }
.fi
.PP
 Cursor positions do not survive transactions: cursors that are open during Session\&.begin_transaction, Session\&.commit_transaction or Session\&.rollback_transaction will lose their position as if Cursor\&.reset was called\&.
.PP
Cursors can be configured to move to a random position with Cursor\&.next is called, see \fBCursor random in Java\fP for details\&.
.SH "Inserting and updating"
.PP
To insert new data, and optionally update existing data, using a cursor, use the Cursor\&.insert method:
.PP
.PP
.nf
    public static int
    cursor_insert(Cursor cursor)
        throws WiredTigerException
    {
        cursor\&.putKeyString("foo");
        cursor\&.putValueString("bar");

        return (cursor\&.insert());
    }
.fi
.PP
 To update existing data using a cursor, use the Cursor\&.update method:
.PP
.PP
.nf
    public static int
    cursor_update(Cursor cursor)
        throws WiredTigerException
    {
        cursor\&.putKeyString("foo");
        cursor\&.putValueString("newbar");

        return (cursor\&.update());
    }
.fi
.PP
 To remove existing data using a cursor, use the Cursor\&.remove method:
.PP
.PP
.nf
    public static int
    cursor_remove(Cursor cursor)
        throws WiredTigerException
    {
        cursor\&.putKeyString("foo");
        return (cursor\&.remove());
    }
.fi
.PP
 The Session\&.open_cursor \fCoverwrite\fP configuration is \fCtrue\fP by default, causing Cursor\&.insert, Cursor\&.remove and Cursor\&.update to ignore the current state of the record, and these methods will succeed regardless of whether or not the record previously exists\&.
.PP
When an application configures \fCoverwrite\fP to \fCfalse\fP, Cursor\&.insert will fail with \fBWT_DUPLICATE_KEY\fP if the record previously exists, and Cursor\&.update and Cursor\&.remove will fail with \fBWT_NOTFOUND\fP if the record does not previously exist\&.
.SH "Cursor position after error"
.PP
After any cursor handle method failure, the cursor's position is undetermined\&. For cursor operations that expect a key to be set before the operation begins (including Cursor\&.search, Cursor\&.insert, Cursor\&.update and Cursor\&.remove), the application's key and value will not be cleared by an error\&.
.PP
Applications that cannot re-position the cursor after failure must duplicate the cursor by calling Session\&.open_cursor and passing the cursor as the \fCto_dup\fP parameter before calling a cursor method that will attempt to re-position the cursor\&. Cursor duplication is not supported for the backup, config and statistics cursor types\&.
.SH "Cursor key/value memory scoping"
.PP
When applications pass pointers to Cursor\&.set_key or Cursor\&.set_value, which can be a \fBWT_ITEM\fP or a string, the application is required to keep the memory valid until the next operation that successfully positions the cursor\&. These operations are Cursor\&.remove, Cursor\&.search, Cursor\&.search_near and Cursor\&.update, but \fBdo not include\fP Cursor\&.insert, as it does not position the cursor\&.
.PP
If such an operation fails (for example, due to a \fBWT_ROLLBACK\fP error), it may be retried without calling Cursor\&.set_key or Cursor\&.set_value again\&. That is, the cursor may still reference the application-supplied memory until it is successfully positioned\&. 
